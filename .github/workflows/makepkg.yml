name: Package

on: [push, pull_request]

jobs:
  msys2-build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: MINGW64, arch: x86_64 },
          { msystem: MINGW32, arch: i686 },
          { msystem: UCRT64, arch: ucrt-x86_64 }
        ]
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - run: git config --global core.autocrlf input
      shell: bash
    - uses: actions/checkout@v2

    - name: Setup MinGW native environment
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: false
        install: >-
          base-devel
          mingw-w64-${{ matrix.arch }}-toolchain

    - name: Get package name
      id: packagelist
      run: |
        pkgname=$(makepkg-mingw --packagelist)
        echo "::set-output name=pkg-name::$(basename $pkgname)"
      env:
        MINGW_ARCH: ${{ matrix.msystem }}

    - name: Create source info
      run: makepkg-mingw --printsrcinfo
      env:
        MINGW_ARCH: ${{ matrix.msystem }}

    - name: Build package
      run: makepkg-mingw --syncdeps --cleanbuild --log --force --noconfirm
      env:
        MINGW_ARCH: ${{ matrix.msystem }}

    - name: Install package
      run: pacman -U --noconfirm ${{ steps.packagelist.outputs.pkg-name }}

    - name: Upload package
      if: github.event_name == 'push'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ steps.packagelist.outputs.pkg-name }}
        path: ${{ steps.packagelist.outputs.pkg-name }}

  continuous-delivery:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs:
      - msys2-build

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_TAG: current

    steps:
    - uses: actions/checkout@v2

    - name: Install github-release
      run: |
        go get github.com/github-release/github-release
        echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Set environment variables
      run: |
        echo "GITHUB_USER=$( echo ${{ github.repository }} | cut -d/ -f1 )" >> $GITHUB_ENV
        echo "GITHUB_REPO=$( echo ${{ github.repository }} | cut -d/ -f2 )" >> $GITHUB_ENV

    - name: Move/Create continuous tag
      run: |
        git tag --force ${{ env.RELEASE_TAG }} ${{ github.sha }}
        git push --tags --force

    - name: Get Time
      run: echo "TIME=$(date -u '+%Y/%m/%d, %H:%M')" >> $GITHUB_ENV

    - name: Check continuous release status
      run: |
        if ! github-release info -t ${{ env.RELEASE_TAG }} > /dev/null 2>&1; then
          echo "RELEASE_COMMAND=release" >> $GITHUB_ENV
        else
          echo "RELEASE_COMMAND=edit" >> $GITHUB_ENV
        fi

    - name: Setup continuous release
      run: >-
        github-release ${{ env.RELEASE_COMMAND }}
        --tag ${{ env.RELEASE_TAG }}
        --name "Current version"
        --description "$DESCRIPTION"
      env:
        DESCRIPTION: |
          Created on ${{ env.TIME }} UTC by @${{ github.actor }} with commit ${{ github.sha }}.
          This is an automated distribution of the latest `fpm` version.
          https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        path: _artifacts

    - name: Add outputs to release tag
      run: |
        for i in *; do
          github-release upload --tag ${{ env.RELEASE_TAG }} \
            --replace --name "$i" --file "$i/$i"
        done
      working-directory: _artifacts
